{"version":3,"sources":["webpack:///./src/components/layout.js","webpack:///./src/pages/404.js","webpack:///./.cache/public-page-renderer.js","webpack:///./src/components/seo.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer-prod.js"],"names":["Layout","_ref","children","Object","core_browser_esm","react_default","a","Fragment","style","margin","propTypes","PropTypes","node","isRequired","NotFoundPage","components_layout","seo","title","m","module","exports","require","default","SEO","description","lang","meta","site","_public_static_d_2417117884_json__WEBPACK_IMPORTED_MODULE_1__","data","metaDescription","siteMetadata","ogImage","withPrefix","_emotion_core__WEBPACK_IMPORTED_MODULE_0__","react_helmet__WEBPACK_IMPORTED_MODULE_4___default","htmlAttributes","name","content","property","author","concat","defaultProps","string","arrayOf","object","React","createContext","func","ProdPageRenderer","location","pageResources","createElement","InternalPageRenderer","assign","json","shape","pathname"],"mappings":"6IAYMA,UAAS,SAAAC,GAAkB,IAAfC,EAAeD,EAAfC,SAChB,OACEC,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,SAAA,KACEJ,OAAAC,EAAA,EAAAD,CAAA,OACEK,MAAO,CACLC,OAAM,WAGRN,OAAAC,EAAA,EAAAD,CAAA,YAAOD,OAMfF,EAAOU,UAAY,CACjBR,SAAUS,IAAUC,KAAKC,YAGZb,iBCjBAc,UARM,kBACnBX,OAAAC,EAAA,EAAAD,CAACY,EAAD,KACEZ,OAAAC,EAAA,EAAAD,CAACa,EAAA,EAAD,CAAKC,MAAM,mBACXd,OAAAC,EAAA,EAAAD,CAAA,uBACAA,OAAAC,EAAA,EAAAD,CAAA,2FCTJ,IAAsBe,EAKpBC,EAAOC,SALaF,EAKWG,EAAQ,OALRH,EAAEI,SAAYJ,2GCa/C,SAASK,EAATtB,GAAiD,IAAlCuB,EAAkCvB,EAAlCuB,YAAaC,EAAqBxB,EAArBwB,KAAMC,EAAezB,EAAfyB,KACxBC,GADuC1B,EAATgB,MAASW,EAAAC,KACvCF,MAcFG,EAAkBN,GAAeG,EAAKI,aAAaP,YACnDQ,EAAUC,YAAU,aAE1B,OACE9B,OAAA+B,EAAA,EAAA/B,CAACgC,EAAA7B,EAAD,CACE8B,eAAgB,CACdX,QAEFR,MAAOU,EAAKI,aAAad,MACzBS,KAAM,CACJ,CACEW,KAAI,cACJC,QAASR,GAEX,CACES,SAAQ,WACRD,QAASX,EAAKI,aAAad,OAE7B,CACEsB,SAAQ,iBACRD,QAASR,GAEX,CACES,SAAQ,UACRD,QAAO,WAET,CACED,KAAI,eACJC,QAAO,WAET,CACED,KAAI,kBACJC,QAASX,EAAKI,aAAaS,QAE7B,CACEH,KAAI,gBACJC,QAASX,EAAKI,aAAad,OAE7B,CACEoB,KAAI,sBACJC,QAASR,GAEX,CACEO,KAAI,WACJC,QAASN,GAEX,CACEK,KAAI,gBACJC,QAASN,IAEXS,OAAOf,KAMfH,EAAImB,aAAe,CACjBjB,KAAI,KACJC,KAAM,GACNF,YAAW,IAGbD,EAAIb,UAAY,CACdc,YAAab,IAAUgC,OACvBlB,KAAMd,IAAUgC,OAChBjB,KAAMf,IAAUiC,QAAQjC,IAAUkC,QAClC5B,MAAON,IAAUgC,OAAO9B,YAGXU,uLCpFYuB,IAAMC,cAAc,IAuDvCpC,IAAUkC,OACTlC,IAAUgC,OAAO9B,WAChBF,IAAUqC,KACRrC,IAAUqC,+ZClEhBC,EAAmB,SAAAhD,GAAiC,IAA9BiD,EAA8BjD,EAA9BiD,SAAUC,EAAoBlD,EAApBkD,cACpC,OAAKA,EAGEL,IAAMM,cAAcC,IAApBlD,OAAAmD,OAAA,CACLJ,WACAC,iBACGA,EAAcI,OALV,MASXN,EAAiBvC,UAAY,CAC3BwC,SAAUvC,IAAU6C,MAAM,CACxBC,SAAU9C,IAAUgC,OAAO9B,aAC1BA,YAGUoC","file":"component---src-pages-404-js-fab7e7262ffcd853cf9d.js","sourcesContent":["/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport \"./layout.css\"\n\nconst Layout = ({ children }) => {\n  return (\n    <>\n      <div\n        style={{\n          margin: `0 auto`,\n        }}\n      >\n        <main>{children}</main>\n      </div>\n    </>\n  )\n}\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n","import React from \"react\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\n\nconst NotFoundPage = () => (\n  <Layout>\n    <SEO title=\"404: Not found\" />\n    <h1>NOT FOUND</h1>\n    <p>You just hit a route that doesn&#39;t exist... the sadness.</p>\n  </Layout>\n)\n\nexport default NotFoundPage\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\nimport { useStaticQuery, graphql, withPrefix } from \"gatsby\"\n\n\nfunction SEO({ description, lang, meta, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const ogImage = withPrefix(`cover.png`)\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={site.siteMetadata.title}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: site.siteMetadata.title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: site.siteMetadata.title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n        {\n          name: `og:image`,\n          content: ogImage,\n        },\n        {\n          name: `twitter:image`,\n          content: ogImage\n        }\n      ].concat(meta)}\n    >\n    </Helmet>\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n"],"sourceRoot":""}